/* MonoProfParser.cs
 * 
 * Parser for the coverage files generated by mprof-report
 * Author: iain Holmes <iain@xamarin.com>
 * Copyright 2015, Xamarin Inc
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;

namespace csmacnz.Coveralls
{
    public class MonoProfParser
	{
		private IFileSystem _fileSystem;
		private readonly PathProcessor _pathProcessor;

		public MonoProfParser(IFileSystem fileSystem, PathProcessor pathProcessor)
		{
			_fileSystem = fileSystem;
			_pathProcessor = pathProcessor;
		}

		public List<CoverageFile> GenerateSourceFiles(XDocument document, bool useRelativePaths)
		{
			var sourceFiles = new List<CoverageFile> ();

			if (document.Root == null) {
				return sourceFiles;
			}

			var filesUsed = document.Root.Elements ("method").Where (m => !string.IsNullOrEmpty(m.Attribute("filename").Value)).Select (m => (m.Attribute ("filename").Value));
			foreach (var fullpath in filesUsed) {
				var path = fullpath;
				if (useRelativePaths)
				{
					path = _pathProcessor.ConvertPath(path);
				}
				path = _pathProcessor.UnixifyPath (path);

				var coverageBuilder = new CoverageFileBuilder (path);

				foreach (var method in document.Root.Elements ("method").Where (m => (m.Attribute ("filename").Value == fullpath))) {
					foreach (var sequencePoint in method.Elements ("statement")) {
						var line = int.Parse (sequencePoint.Attribute ("line").Value);
						var count = int.Parse (sequencePoint.Attribute ("counter").Value);

						coverageBuilder.RecordCoverage (line, count);
					}
				}

				var readAllText = _fileSystem.TryLoadFile(fullpath);
				if (readAllText != null)
				{
					Console.WriteLine ("{0}", readAllText);
					coverageBuilder.AddSource(readAllText);
				}
				var coverageFile = coverageBuilder.CreateFile();
				sourceFiles.Add (coverageFile);
			}

			return sourceFiles;
		}
	}
}

